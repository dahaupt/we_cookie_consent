{"version":3,"sources":["ConsentApp.js"],"names":["ConsentApp","window","push","event","service","variable","trigger","checkConsentOptIn","consent","$element","$parentElement","find","$","createConsentOptInContainer","name","klaro","translations","klaroConfig"],"mappings":"mJAAA,GAAMA,CAAAA,UAAU,CAAG,GAAI,WAAY,CAE/BC,MAAM,CAANA,SAAAA,CAAmBA,MAAM,CAANA,SAAAA,EAAnBA,EAF+B,CAanBA,KAAAA,cAAAA,CAAiBC,SAAAA,CAAAA,CAAAA,CAAAA,CAAjB,CACIC,KAAAA,CADJ,EAAA,CAEKC,CAAAA,GAAAA,CAAYC,CAAZD,IAAAA,CAAAA,OAAAA,CAAAA,2BAAAA,CAFL,EAIHH,MAAA,CAAAA,SAAAA,CAAAA,IAAAA,CAAAA,eAAAA,CAAAA,CACJE,KAAA,CAAAC,CAAA,CAAAA,GAAAA,CAAAE,OADIL,CAAAA,CAFQG,CAAO,CAAPA,GAAAA,CAERH,QAAAA,IAAAA,CAJG,CAHZ,UAAA,QAAAA,CAAAA,MAAA,CAAAG,CAAA,CAAA,WAAA,CAGY,CASJH,MAAM,CAACG,CAAO,CAAdH,WAAM,CAANA,CAAAA,CAAAA,CAAAA,CAAAA,CATI,CAuBPM,EAAAA,GAAAA,CAAL,CAAKA,WAvBO,EAwBHC,OAAD,CAACA,KAAAA,CAAWC,yBAAiBL,CAAA,CAAjBK,WAAAA,CAAXD,8CAAAA,CAxBGP,CAbmB,CAkD1B,KAAA,iBAAA,CAAM,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACHS,CAAAA,CAAAA,EAAeC,CAAK,CAApBD,MADG,EAEHD,CAAA,CAAAA,IAAAA,EAFG,CAGNC,CAAA,CAAAA,OAAAA,CAAA,KAAA,2BAAA,CAAAA,CAAA,CAAAA,CAHM,CATHE,CAAC,CAAC,uBAAwBR,CAAO,CAA/B,IAAA,CAAFQ,KAAC,CAADA,CAAAA,KAAAA,CAAqD,UAAY,CAqBpEC,KAAAA,CAAAA,UAAAA,GAAAA,aAAAA,CAAwCT,CAAS,CAAjDS,IAAAA,IArBoE,CAwBrED,CAAA,CAAA,6BAAqCE,CAArC,CAAA,IAAA,CAAAF,KAAA,CAAAA,CAAAA,EAAAA,CAAA,UAAAA,CAxBqE,CAqBzEG,KAAA,CAAAA,UAAAA,GAAAA,oBAAAA,EArByE,CAMzDA,KAAK,CAALA,UAAAA,GAAAA,aAAAA,EANRH,CAAAA,CASG,GACHF,CAAc,CAAdA,IAAAA,CAAAA,iBAAAA,EAAAA,MAAAA,EADG,CAEHD,CAAQ,CAARA,IAAAA,EAFG,CAAN,CAlD0B,CA8D/B,KAAA,2BAAA,CAAmC,SAAA,CAAA,CAAmB,CAClD,GAAMO,CAAAA,CAAY,CAAGC,WAAW,CAAXA,YAAAA,CAAyBF,KAAK,CAAnD,QAA8CA,EAAzBE,CAArB,CAEA,MAAA,uBAAA,MAAA,CAA6Bb,CAAO,CAApC,IAAA,CAAA,8DAAA,EAAA,MAAA,CACsBA,CAAO,CAD7B,KAAA,CAAA,oBAAA,EAAA,MAAA,CAEMA,CAAO,CAFb,SAAA,CAAA,sEAAA,EAAA,MAAA,CAGyDA,CAAO,CAHhE,IAAA,CAAA,KAAA,EAAA,MAAA,CAG0EY,CAAY,CAHtF,QAAA,CAAA,gGAAA,EAAA,MAAA,CAKkCZ,CAAO,CALzC,IAAA,CAAA,sEAAA,EAAA,MAAA,CAK+GA,CAAO,CALtH,IAAA,CAAA,yDAAA,EAAA,MAAA,CAMmCA,CAAO,CAN1C,IAAA,CAAA,gCAAA,EAAA,MAAA,CAM6EY,CAAY,CANzF,cAAA,CAAA,gDAAA,CAHJ,CA9DJ,CAAA","file":"ConsentApp.js","sourcesContent":["const ConsentApp = new function () {\n    //-- global variables ---\n    window.dataLayer = window.dataLayer || [];\n\n    //--- public functions ---\n    /**\n     * Callback function for GoogleTagManager Script to fire the dataLayer trigger\n     * @param consent\n     * @param service\n     */\n    this.consentChanged = function (consent, service) {\n        if (consent === true) {\n            if (service.name.indexOf('google-tagmanager-service') !== -1) {\n                window.dataLayer.push({\n                    event: service.gtm.trigger,\n                    [service.gtm.variable]: true\n                });\n            }\n        }\n\n        //Check if the own callback function is allready defined\n        if (typeof window[service.ownCallback] === \"function\") {\n            window[service.ownCallback](consent, service);\n        } else if (service.ownCallback !== '') {\n            console.error('The Callback function ' + service.ownCallback + ' is not yet defined. Please create it first.');\n        }\n    };\n\n    /**\n     * Evaluates the consent and initiates all further opt-in modifications.\n     *\n     * @param consent\n     * @param service\n     * @param $element\n     * @param $parentElement\n     */\n    this.checkConsentOptIn = function (consent, service, $element, $parentElement) {\n        if (!consent && $element.length) {\n            $element.hide();\n            $parentElement.prepend(this.createConsentOptInContainer(service));\n\n            $('button[data-optin=\"' + service.name + '\"]').click(function () {\n                klaro.getManager().updateConsent(service.name, true);\n\n                if ($('input[data-optin-always=\"' + service.name + '\"]').is(':checked')) {\n                    klaro.getManager().saveAndApplyConsents();\n                } else {\n                    klaro.getManager().applyConsents();\n                }\n            });\n        } else {\n            $parentElement.find('.service-opt-in').remove();\n            $element.show();\n        }\n    };\n\n    /**\n     * Creates a service opt-in container based on the provided service.\n     *\n     * @param service\n     * @returns {string}\n     */\n    this.createConsentOptInContainer = function (service) {\n        const translations = klaroConfig.translations[klaro.language()];\n\n        return `<div data-service=\"${service.name}\" class=\"service-opt-in\">\n            <p class=\"lead\">${service.title}</p>\n            ${service.optInText}\n            <button class=\"btn btn-primary btn-sm\" data-optin=\"${service.name}\">${translations.activate}</button>\n              <div class=\"form-check\">\n                <input id=\"optin-always-${service.name}\" type=\"checkbox\" class=\"form-check-input\" data-optin-always=\"${service.name}\" checked>\n                <label for=\"optin-always-${service.name}\" class=\"form-check-label\">${translations.activateAlways}</label>\n            </div>\n          </div>`;\n    };\n};\n"]}